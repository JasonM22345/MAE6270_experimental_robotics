#!/usr/bin/env python

import rospy
from geometry_msgs.msg import Twist
from sensor_msgs.msg import CompressedImage
from python_qt_binding.QtWidgets import QApplication, QWidget, QSlider, QVBoxLayout, QLabel, QPushButton, QHBoxLayout
from python_qt_binding.QtCore import Qt, QTimer
from cv_bridge import CvBridge
import sys
import cv2
import numpy as np
from pynput import keyboard

class VelocityControlWidget(QWidget):
    def __init__(self):
        super(VelocityControlWidget, self).__init__()

        # ROS publisher
        self.cmd_vel_pub = rospy.Publisher('/cmd_vel', Twist, queue_size=10)
        self.image_sub = rospy.Subscriber('/usb_cam/image_raw/compressed', CompressedImage, self.image_callback)

        # Initialize CvBridge
        self.bridge = CvBridge()

        # Create layout
        layout = QVBoxLayout()
        
        # Video display
        self.video_label = QLabel()
        layout.addWidget(self.video_label)

        # Orientation and trajectory display
        self.orientation_label = QLabel('Orientation: 0.0')
        self.trajectory_label = QLabel('Trajectory: None')
        layout.addWidget(self.orientation_label)
        layout.addWidget(self.trajectory_label)

        # Control sliders
        control_layout = QHBoxLayout()

        # Linear Velocity Slider
        self.linear_slider = QSlider(Qt.Horizontal)
        self.linear_slider.setMinimum(-100)
        self.linear_slider.setMaximum(100)
        self.linear_slider.setValue(0)
        self.linear_slider.valueChanged.connect(self.update_velocities)
        self.linear_label = QLabel('Linear Velocity: 0.0')
        control_layout.addWidget(self.linear_label)
        control_layout.addWidget(self.linear_slider)

        # Angular Velocity Slider
        self.angular_slider = QSlider(Qt.Horizontal)
        self.angular_slider.setMinimum(-100)
        self.angular_slider.setMaximum(100)
        self.angular_slider.setValue(0)
        self.angular_slider.valueChanged.connect(self.update_velocities)
        self.angular_label = QLabel('Angular Velocity: 0.0')
        control_layout.addWidget(self.angular_label)
        control_layout.addWidget(self.angular_slider)

        # Add control layout to main layout
        layout.addLayout(control_layout)

        # Emergency Stop Button
        self.emergency_stop_button = QPushButton("Emergency Stop")
        self.emergency_stop_button.clicked.connect(self.emergency_stop)
        layout.addWidget(self.emergency_stop_button)

        # Controlled Mode Button
        self.controlled_mode_button = QPushButton("Controlled Mode")
        self.controlled_mode_button.clicked.connect(self.controlled_mode)
        layout.addWidget(self.controlled_mode_button)

        self.setLayout(layout)

        # Initial twist message
        self.twist = Twist()
        self.control_mode = False
        self.publish_velocity = False

        # Timer for updating the GUI
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_gui)
        self.timer.start(100)  # Update every 100 ms

        # Start the keyboard listener
        self.listener = keyboard.Listener(on_press=self.on_press, on_release=self.on_release)
        self.listener.start()

    def image_callback(self, msg):
        # Convert the compressed image to an OpenCV format
        np_arr = np.frombuffer(msg.data, np.uint8)
        image = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)

        # Convert image to Qt format and display
        if image is not None:
            h, w, ch = image.shape
            bytes_per_line = ch * w
            q_image = QImage(image.data, w, h, bytes_per_line, QImage.Format_BGR888)
            self.video_label.setPixmap(QPixmap.fromImage(q_image))

    def update_velocities(self):
        # Get the slider values
        linear_velocity = self.linear_slider.value() / 100.0
        angular_velocity = self.angular_slider.value() / 100.0

        # Update labels
        self.linear_label.setText(f'Linear Velocity: {linear_velocity:.2f}')
        self.angular_label.setText(f'Angular Velocity: {angular_velocity:.2f}')

        # Update the Twist message
        self.twist.linear.x = linear_velocity
        self.twist.angular.z = -angular_velocity

        # Publish the Twist message if in controlled mode and velocity is being set
        if self.control_mode and self.publish_velocity:
            self.cmd_vel_pub.publish(self.twist)
        elif self.control_mode:
            # If in controlled mode and not publishing, send zeros
            self.twist.linear.x = 0.0
            self.twist.angular.z = 0.0
            self.cmd_vel_pub.publish(self.twist)

    def emergency_stop(self):
        # Set velocities to zero
        self.linear_slider.setValue(0)
        self.angular_slider.setValue(0)
        self.update_velocities()

    def controlled_mode(self):
        # Reset angular velocity to zero when controlled mode is selected
        self.angular_slider.setValue(0)
        self.update_velocities()
        self.control_mode = True

    def update_gui(self):
        # Update orientation and trajectory information (mock data for now)
        self.orientation_label.setText('Orientation: 0.0')  # Update with actual data
        self.trajectory_label.setText('Trajectory: None')    # Update with actual data

    def on_press(self, key):
        try:
            if key.char == 'w':
                self.publish_velocity = True
                self.update_velocities()
        except AttributeError:
            pass  # Ignore non-character keys

    def on_release(self, key):
        if key.char == 'w':
            self.publish_velocity = False
            self.update_velocities()

if __name__ == '__main__':
    rospy.init_node('velocity_control', anonymous=True)

    app = QApplication(sys.argv)
    velocity_control_widget = VelocityControlWidget()
    velocity_control_widget.show()

    sys.exit(app.exec_())
